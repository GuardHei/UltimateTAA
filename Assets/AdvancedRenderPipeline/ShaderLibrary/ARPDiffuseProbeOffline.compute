// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GBufferPrefilter
#pragma kernel VBufferPrefilter
#pragma kernel VBufferPadding

#include "ARPCommon.hlsl"

TEXTURECUBE(_DiffuseProbeGBufferCubemap0);
TEXTURECUBE(_DiffuseProbeGBufferCubemap1);
TEXTURECUBE(_DiffuseProbeGBufferCubemap2);

RW_TEXTURE2D(float4, _DiffuseProbeGBuffer0);
RW_TEXTURE2D(float2, _DiffuseProbeGBuffer1);
RW_TEXTURE2D(float, _DiffuseProbeGBuffer2);
RW_TEXTURE2D(float2, _DiffuseProbeVBuffer0);

[numthreads(8,8,1)]
void GBufferPrefilter(uint3 id : SV_DispatchThreadID) {
    uint2 coord = id.xy;
    uint gbufferSize = GetDiffuseProbeGBufferSize();

    if (coord.x >= gbufferSize || coord.y >= gbufferSize) return;
    
    float2 gbufferOct = GetNormalizedOctCoords(coord, gbufferSize);
    float3 N = UnpackNormalOctQuadEncode(gbufferOct);

    float3 albedoTotal = float3(.0f, .0f, .0f);
    float skyVisibilityTotal = .0f;
    float3 normalTotal = float3(.0f, .0f, .0f);
    float radialDepthTotal = .0f;
    float weightTotal = .0f;

    float3x3 o2w = GetLocalFrame(N);

    const uint SAMPLE_COUNT = 2048u;
    for (uint i = 0; i < SAMPLE_COUNT; i++) {
        float2 Xi = Hammersley2dSeq(i, SAMPLE_COUNT);
        float3 dir = SampleHemisphereUniform(Xi.x, Xi.y);
        dir = mul(dir, o2w);
        float4 gbuffer0 = SAMPLE_TEXTURECUBE_LOD(_DiffuseProbeGBufferCubemap0, sampler_linear_clamp, dir, 0);
        float2 gbuffer1 = SAMPLE_TEXTURECUBE_LOD(_DiffuseProbeGBufferCubemap1, sampler_linear_clamp, dir, 0).rg;
        float gbuffer2 = SAMPLE_TEXTURECUBE_LOD(_DiffuseProbeGBufferCubemap2, sampler_linear_clamp, dir, 0).r;

        float3 albedo = gbuffer0.rgb;
        float skyVisibility = gbuffer0.a;
        float3 normal = DecodeNormalComplex(gbuffer1);
        float radialDepth = gbuffer2;
        
        float cosTheta = dot(N, dir);
        float weight = max(.0f, cosTheta);
        weight = pow(weight, _DiffuseProbeParams1.w);

        // weight = 1.0f;

        albedoTotal += albedo * weight;
        normalTotal += normal * weight;
        skyVisibilityTotal += skyVisibility * weight;
        radialDepthTotal += radialDepth * weight;
        weightTotal += weight;
    }

    weightTotal = max(weightTotal, FLT_EPS);

    float3 avgAlbedo = albedoTotal / weightTotal;
    float avgSkyVisibility = skyVisibilityTotal / weightTotal;
    float3 avgNormal = normalTotal / weightTotal;
    float avgRadialDepth = radialDepthTotal / weightTotal;

    _DiffuseProbeGBuffer0[coord] = float4(avgAlbedo, avgSkyVisibility);
    _DiffuseProbeGBuffer1[coord] = EncodeNormalComplex(avgNormal);
    _DiffuseProbeGBuffer2[coord] = avgRadialDepth;
}

[numthreads(8,8,1)]
void VBufferPrefilter(uint3 id : SV_DispatchThreadID) {
    uint2 coord = id.xy;
    uint vbufferSize = GetDiffuseProbeVBufferSize();

    if (coord.x > vbufferSize || coord.y > vbufferSize) return;
    
    float2 vbufferOct = GetNormalizedOctCoords(coord, vbufferSize);
    float3 N = UnpackNormalOctQuadEncode(vbufferOct);

    float radialDepthTotal = .0f;
    float radialDepth2Total = .0f;
    float weightTotal = .0f;

    float3x3 o2w = GetLocalFrame(N);

    const uint SAMPLE_COUNT = 2048u;
    for (uint i = 0u; i < SAMPLE_COUNT; i++) {
        float2 Xi = Hammersley2dSeq(i, SAMPLE_COUNT);
        float3 dir = SampleHemisphereUniform(Xi.x, Xi.y);
        dir = mul(dir, o2w);
        float gbuffer2 = SAMPLE_TEXTURECUBE_LOD(_DiffuseProbeGBufferCubemap2, sampler_linear_clamp, dir, 0).r;
        
        float maxRadialDepth = GetMaxVisibilityDepth();
        float radialDepth = min(gbuffer2, maxRadialDepth);
        
        float cosTheta = dot(N, dir);
        float weight = max(.0f, cosTheta);
        weight = pow(weight, _DiffuseProbeParams1.w);
        radialDepthTotal += radialDepth * weight;
        radialDepth2Total += (radialDepth * radialDepth) * weight;
        weightTotal += weight;
    }

    // float sampleCount = float(SAMPLE_COUNT);
    weightTotal = max(weightTotal, FLT_EPS);

    float avgRadialDepth = radialDepthTotal / weightTotal;
    float avgRadialDepth2 = radialDepth2Total / weightTotal;

    _DiffuseProbeVBuffer0[coord] = float2(avgRadialDepth, avgRadialDepth2);
}

[numthreads(8,8,1)]
void VBufferPadding(uint3 id : SV_DispatchThreadID) {
    const uint vbufferSize = GetDiffuseProbeVBufferSize();
    const uint vbufferSizeMinusOne = vbufferSize - 1u;
    const uint vbufferSizeMinusTwo = vbufferSizeMinusOne - 1u;
    const uint vbufferHalfSize = vbufferSize >> 1;
    // if (id.x != 0 && id.y != 0 && id.x != vbufferSizeMinusOne && id.y != vbufferSizeMinusOne) return;

    if (id.x > vbufferSizeMinusOne || id.y > vbufferSizeMinusOne) return;

    if (id.x == 0) {
        if (id.y == 0) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(vbufferSizeMinusTwo, vbufferSizeMinusTwo)];
        } else if (id.y == vbufferSizeMinusOne) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(vbufferSizeMinusTwo, 1u)];
        } else if (id.y < vbufferHalfSize) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(1u, vbufferHalfSize + (vbufferHalfSize - id.y - 1u))];
        } else {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(1u, 1u + vbufferSizeMinusTwo - id.y)];
        }
    } else if (id.x == vbufferSizeMinusOne) {
        if (id.y == 0) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(1u, vbufferSizeMinusTwo)];
        } else if (id.y == vbufferSizeMinusOne) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(1u, 1u)];
        } else if (id.y < vbufferHalfSize) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(vbufferSizeMinusTwo, vbufferHalfSize + (vbufferHalfSize - id.y - 1u))];
        } else {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(vbufferSizeMinusTwo, 1u + vbufferSizeMinusTwo - id.y)];
        }
    } else if (id.x < vbufferHalfSize) {
        if (id.y == 0) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(vbufferHalfSize + (vbufferHalfSize - id.x - 1u), 1u)];
        } else if (id.y == vbufferSizeMinusOne) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(vbufferHalfSize + (vbufferHalfSize - id.x - 1u), vbufferSizeMinusTwo)];
        }
    } else {
        if (id.y == 0) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(1u + vbufferSizeMinusTwo - id.x, 1u)];
        } else if (id.y == vbufferSizeMinusOne) {
            _DiffuseProbeVBuffer0[id.xy] = _DiffuseProbeVBuffer0[uint2(1u + vbufferSizeMinusTwo - id.x, vbufferSizeMinusTwo)];
        }
    }
}