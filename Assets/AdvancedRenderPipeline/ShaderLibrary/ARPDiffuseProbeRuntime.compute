// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RadianceUpdate
#pragma kernel IrradiancePrefilter
#pragma kernel IrradiancePadding

#pragma multi_compile _ MAIN_LIGHT_SHADOW_ON

#include "ARPCommon.hlsl"

RW_TEXTURE2D_ARRAY(float3, _RadianceArr);
RW_TEXTURE2D_ARRAY(float3, _IrradianceArr);

[numthreads(8,8,1)]
void RadianceUpdate(uint3 id : SV_DispatchThreadID) {
    float4 gbuffer0 = LOAD_TEXTURE2D_ARRAY_LOD(_DiffuseProbeGBufferArr0, id.xy, id.z, 0);
    float2 gbuffer1 = LOAD_TEXTURE2D_ARRAY_LOD(_DiffuseProbeGBufferArr1, id.xy, id.z, 0).rg;
    float gbuffer2 = LOAD_TEXTURE2D_ARRAY_LOD(_DiffuseProbeGBufferArr2, id.xy, id.z, 0).r;

    float3 albedo = gbuffer0.rgb;
    float skyVisibility = gbuffer0.a;
    float3 N = DecodeNormalComplex(gbuffer1);
    float3 L = _MainLightDirection.rgb;  
    float3 lightColor = _MainLightColor.rgb;
    float2 gbufferOct = GetNormalizedOctCoords(id.xy, GetDiffuseProbeSize());
    float3 dir = UnpackNormalOctQuadEncode(gbufferOct);
    float3 skyColor = SampleGlobalEnvMapSpecular(dir, .0f);
    float NdotL = saturate(dot(N, L));
    float3 diffuseColor = NdotL * INV_PI * albedo * lightColor;
    float3 posWS = GetDiffuseProbePosWS(id.z) + dir * gbuffer2;

    if (IsDiffuseProbeIndirectShadowSamplingEnabled() && NdotL > .0f) {
        float3 shadow = SampleMainLightShadowHard(posWS, N, 3);
        diffuseColor *= shadow;
    }

    if (IsDiffuseProbeMultiBounceEnabled()) {
        float3 indirectDiffuse = SampleIndirectDiffuseGI(posWS, N, albedo, float3(1.0f, 1.0f, 1.0f), true);
        diffuseColor += indirectDiffuse;
    }

    _RadianceArr[id] = lerp(diffuseColor, skyColor, skyVisibility);
}

[numthreads(8,8,1)]
void IrradiancePrefilter(uint3 id : SV_DispatchThreadID) {
    uint endCoord = GetDiffuseProbeSize();
    if (id.x >= endCoord || id.y >= endCoord) {
        return;
    }
    float2 coord = id.xy;
    float2 gbufferOct = GetNormalizedOctCoords(coord, GetDiffuseProbeSize());
    float3 N = UnpackNormalOctQuadEncode(gbufferOct);
    float3x3 o2w = GetLocalFrame(N);

    float3 radiance_sum = float3(.0f, .0f, .0f);
    float weight_sum = .0f;

    const uint SAMPLE_COUNT = 512u;
    
    for (uint i = 0u; i < SAMPLE_COUNT; i++) {
        float2 Xi = Hammersley2dSeq(i, SAMPLE_COUNT);
        float3 dir = SampleHemisphereUniform(Xi.x, Xi.y);
        dir = mul(dir, o2w);

        float2 sampled_uv = DirToNormalizedOct(dir);
        float3 sampled_radiance = SAMPLE_TEXTURE2D_ARRAY_LOD(_DiffuseProbeRadianceArr, sampler_linear_clamp, sampled_uv, id.z, 0).rgb;
        float cosTheta = dot(N, dir);
        float weight = max(.0f, cosTheta);

        radiance_sum += sampled_radiance * weight;
        weight_sum += weight;
    }

    weight_sum = max(weight_sum, FLT_EPS);
    _IrradianceArr[id] = radiance_sum / weight_sum;
}

[numthreads(8,8,1)]
void IrradiancePadding(uint3 id : SV_DispatchThreadID) {
    const uint probeSize = GetDiffuseProbeSize();
    const uint probeSizeMinusOne = probeSize - 1u;
    const uint probeSizeMinusTwo = probeSizeMinusOne - 1u;
    const uint probeHalfSize = probeSize >> 1;
    // if (id.x != 0 && id.y != 0 && id.x != probeSizeMinusOne && id.y != probeSizeMinusOne) return;

    // float3 debugColor = float3(1.0f, .0f, .0f);

    if (id.x > probeSizeMinusOne || id.y > probeSizeMinusOne) return;

    if (id.x == 0) {
        if (id.y == 0) {
            _IrradianceArr[id] = _IrradianceArr[uint3(probeSizeMinusTwo, probeSizeMinusTwo, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
        else if (id.y == probeSizeMinusOne) {
            _IrradianceArr[id] = _IrradianceArr[uint3(probeSizeMinusTwo, 1u, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
        else if (id.y < probeHalfSize) {
            _IrradianceArr[id] = _IrradianceArr[uint3(1u, probeHalfSize + (probeHalfSize - id.y - 1u), id.z)];
            // _IrradianceArr[id] = debugColor;
        }
        else {
            _IrradianceArr[id] = _IrradianceArr[uint3(1u, 1u + probeSizeMinusTwo - id.y, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
    }
    else if (id.x == probeSizeMinusOne) {
        if (id.y == 0) {
            _IrradianceArr[id] = _IrradianceArr[uint3(1u, probeSizeMinusTwo, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
        else if (id.y == probeSizeMinusOne) {
            _IrradianceArr[id] = _IrradianceArr[uint3(1u, 1u, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
        else if (id.y < probeHalfSize) {
            _IrradianceArr[id] = _IrradianceArr[uint3(probeSizeMinusTwo, probeHalfSize + (probeHalfSize - id.y - 1u), id.z)];
            // _IrradianceArr[id] = debugColor;
        }
        else {
            _IrradianceArr[id] = _IrradianceArr[uint3(probeSizeMinusTwo, 1u + probeSizeMinusTwo - id.y, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
    }
    else if (id.x < probeHalfSize) {
        if (id.y == 0) {
            _IrradianceArr[id] = _IrradianceArr[uint3(probeHalfSize + (probeHalfSize - id.x - 1u), 1u, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
        else if (id.y == probeSizeMinusOne) {
            _IrradianceArr[id] = _IrradianceArr[uint3(probeHalfSize + (probeHalfSize - id.x - 1u), probeSizeMinusTwo, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
    }
    else {
        if (id.y == 0) {
            _IrradianceArr[id] = _IrradianceArr[uint3(1u + probeSizeMinusTwo - id.x, 1u, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
        else if (id.y == probeSizeMinusOne) {
            _IrradianceArr[id] = _IrradianceArr[uint3(1u + probeSizeMinusTwo - id.x, probeSizeMinusTwo, id.z)];
            // _IrradianceArr[id] = debugColor;
        }
    }
}
